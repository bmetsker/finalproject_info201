# Calculations
qtec_avg_fluctuation <- mean(qtec_df$Fluctuation)
usd_avg_fluctuation <- mean(usd_df$Fluctuation)
qtec_avg_day_range <- mean(qtec_df$Day_Range)
usd__avg_day_range <- mean(usd_df$Day_Range)
usd_ltd_volume <- sum(usd_df$Volume)
qtec_ltd_volume <- sum(qtec_df$Volume)
ffr_avg_rate <- mean(ffr_df$FEDFUNDS)
ffr_min_rate <- min(ffr_df$FEDFUNDS)
getwd()
setwd("/Users/Benmetsker22/Desktop/Git/finalproject_info201")
qtec_df <- data.frame(read.csv("data/First_Trust_NASDAQ_100_Technology_Sector_Index_Fund_05022006_11072019.csv", stringsAsFactors = FALSE))
usd_df <- data.frame(read.csv("data/ProShares_Ultra_Consumer_Goods_02012007_11072019.csv", stringsAsFactors = FALSE))
unfiltered_ffr_df <- data.frame(read.csv("data/Effective_Feceral_Funds_Rate_07011954_10012019.csv", stringsAsFactors = FALSE))
qtec_df$Fluctuation <- qtec_df$High - qtec_df$Low
qtec_df$Day_Range <- qtec_df$Close - qtec_df$Open
usd_df$Fluctuation <- usd_df$High - usd_df$Low
usd_df$Day_Range <- usd_df$Close - usd_df$Open
unfiltered_ffr_df$Year <- substr(unfiltered_ffr_df$DATE, 1, 4)
ffr_df <- filter(unfiltered_ffr_df, Year >= 2006)
View(qtec_df)
summary_data <- function(dataset) {
ret <- list()
dataset$Volume
}
summary_data(qtec_df)
summary_data <- function(dataset) {
ret <- list()
mean(dataset$Volume)
mean(qtec_df$Fluctuation)
}
summary_data(qtec_df)
summary_data <- function(dataset) {
ret <- list(
mean(dataset$Volume),
mean(qtec_df$Fluctuation))
}
summary_data(qtec_df)
summary_data <- function(dataset) {
ret <- list(
mean(dataset$Volume),
mean(dataset$Fluctuation))
}
summary_data(qtec_df)
summary_data <- function(dataset) {
ret <- c(
mean(dataset$Volume),
mean(dataset$Fluctuation))
}
summary_data(qtec_df)
summary_data <- function(dataset) {
ret <- list()
mean(dataset$Volume) &&
mean(dataset$Fluctuation)
}
summary_data(qtec_df)
library(dplyr)
<<<<<<< HEAD
library(dplyr)
library(ggplot2)
library(plotly)
library(knitr)
source('analysis(Team).R')
library(shiny); runApp('practice_app.R')
runApp('practice_app.R')
runApp('practice_app.R')
runApp('practice_app.R')
runApp('practice_app.R')
runApp('practice_app.R')
runApp('practice_app.R')
?selectInput
runApp('practice_app.R')
runApp('practice_app.R')
runApp('practice_app.R')
runApp('practice_app.R')
runApp('practice_app.R')
runApp('practice_app.R')
runApp('~/Desktop/Git/a7-bmetsker')
runApp('~/Desktop/Git/a7-bmetsker')
runApp('~/Desktop/Git/a7-bmetsker')
outputs$popchart <- renderPlot({
state_race_long <- midwest %>%
select(state, popwhite, popblack, popamerindian, popasian, popother) %>%
gather(key = race, value = population, -state)
ggplot(state_race_long) +
geom_col(mapping = aes(x = race, y = population, fill = state))
})
runApp('practice_app.R')
runApp('practice_app.R')
runApp('practice_app.R')
runApp('practice_app.R')
runApp('practice_app.R')
runApp('practice_app.R')
runApp('practice_app.R')
runApp('practice_app.R')
runApp('practice_app.R')
runApp('practice_app.R')
runApp('practice_app.R')
runApp('~/Desktop/Git/a7-bmetsker')
runApp('~/Desktop/Git/a7-bmetsker')
runApp('practice_app.R')
View(WorldPhones)
runApp('practice_app.R')
runApp('~/Desktop/Git/a7-bmetsker')
barplot(WorldPhones[,input$region]*1000,
main=input$region,
ylab="Number of Telephones",
xlab="Year")
barplot(WorldPhones,
main=input$region,
ylab="Number of Telephones",
xlab="Year")
library(shiny)
library(dplyr)
library(tidyr)
library(ggplot2)
library(shinythemes)
barplot(midwest,
main = input$state,
ylab = "Number of Telephones",
xlab = "Year")
barplot(WorldPhones,
main=input$region,
ylab="Number of Telephones",
xlab="Year")
barplot(midwest,
main = state,
ylab = "Number of Telephones",
xlab = "Year")
barplot(midwest,
main = state,
ylab = "Number of Telephones",
xlab = "Year")
runApp('~/Desktop/Git/a7-bmetsker')
runApp('~/Desktop/Git/a7-bmetsker')
c
runApp('~/Desktop/Git/a7-bmetsker')
runApp('~/Desktop/Git/a7-bmetsker')
runApp('~/Desktop/Git/a7-bmetsker')
runApp('~/Desktop/Git/a7-bmetsker')
runApp('~/Desktop/Git/a7-bmetsker')
ggplot(data = midwest,
mapping = aes(x = percollege)) +
geom_histogram(color = "darkblue", fill = "lightblue")
runApp('practice_app.R')
runApp('practice_app.R')
runApp('practice_app.R')
runApp('~/Desktop/Git/a7-bmetsker')
runApp('practice_app.R')
View(midwest)
runApp('practice_app.R')
runApp('practice_app.R')
runApp('practice_app.R')
runApp('practice_app.R')
runApp('practice_app.R')
runApp('practice_app.R')
runApp('practice_app.R')
runApp('practice_app.R')
runApp('practice_app.R')
runApp('practice_app.R')
runApp('practice_app.R')
runApp('practice_app.R')
runApp('practice_app.R')
runApp('practice_app.R')
runApp('practice_app.R')
runApp('practice_app.R')
runApp('practice_app.R')
runApp('practice_app.R')
runApp('practice_app.R')
runApp('practice_app.R')
runApp('practice_app.R')
runApp('practice_app.R')
runApp('practice_app.R')
runApp('practice_app.R')
runApp('practice_app.R')
runApp('practice_app.R')
runApp('practice_app.R')
runApp('practice_app.R')
runApp('practice_app.R')
runApp('practice_app.R')
runApp('practice_app.R')
runApp('practice_app.R')
runApp('practice_app.R')
runApp('~/Desktop/Git/a7-bmetsker')
runApp('~/Desktop/Git/a7-bmetsker')
runApp()
runApp('~/Desktop/Git/a7-bmetsker')
runApp('~/Desktop/Git/a7-bmetsker')
runApp('~/Desktop/Git/a7-bmetsker')
runApp('~/Desktop/Git/a7-bmetsker')
runApp('~/Desktop/Git/a7-bmetsker')
runApp('~/Desktop/Git/a7-bmetsker')
runApp('~/Desktop/Git/a7-bmetsker')
runApp('~/Desktop/Git/a7-bmetsker')
runApp('~/Desktop/Git/a7-bmetsker')
runApp('~/Desktop/Git/a7-bmetsker')
runApp('~/Desktop/Git/a7-bmetsker')
runApp('~/Desktop/Git/a7-bmetsker')
runApp('~/Desktop/Git/a7-bmetsker')
runApp('~/Desktop/Git/a7-bmetsker')
runApp('~/Desktop/Git/a7-bmetsker')
runApp('~/Desktop/Git/a7-bmetsker')
runApp('~/Desktop/Git/a7-bmetsker')
runApp('~/Desktop/Git/a7-bmetsker')
runApp('~/Desktop/Git/a7-bmetsker')
runApp('~/Desktop/Git/a7-bmetsker')
runApp('~/Desktop/Git/a7-bmetsker')
runApp('~/Desktop/Git/a7-bmetsker')
runApp('~/Desktop/Git/a7-bmetsker')
?aes_string
runApp('~/Desktop/Git/a7-bmetsker')
runApp('~/Desktop/Git/a7-bmetsker')
?geom_histogram
runApp('~/Desktop/Git/a7-bmetsker')
?hist
hist(midwest$input$x2)
runApp('~/Desktop/Git/a7-bmetsker')
runApp('~/Desktop/Git/a7-bmetsker')
runApp('~/Desktop/Git/a7-bmetsker')
runApp('~/Desktop/Git/a7-bmetsker')
runApp('~/Desktop/Git/a7-bmetsker')
runApp('~/Desktop/Git/a7-bmetsker')
?aes_string
?geom_point
runApp('~/Desktop/Git/a7-bmetsker')
runApp('~/Desktop/Git/a7-bmetsker')
runApp('~/Desktop/Git/a7-bmetsker')
runApp('~/Desktop/Git/a7-bmetsker')
runApp('~/Desktop/Git/a7-bmetsker')
mutateFluctuation <- function(data) {
newDataFrame <-data %>%
mutate(Fluctuation = data$High - data$Low) %>%
select(Date, Fluctuation)
}
Test <- createDataFrame()
createDataFrame <- function() {
FederalFund <- read.csv("data/Effective_Feceral_Funds_Rate_07011954_10012019.csv", stringsAsFactors = FALSE)
colnames(FederalFund) <- c("Date", "FedFunds")
Technology <- read.csv("data/First_Trust_NASDAQ_100_Technology_Sector_Index_Fund_05022006_11072019.csv", stringsAsFactors = FALSE) %>%
mutate(Fluctuation = data$High - data$Low) %>%
select(Date, Fluctuation)
colnames(Technology) <- c("Date", paste("Technology Fluctuation"))
ConsumerGoods <- read.csv("data/ProShares_Ultra_Consumer_Goods_02012007_11072019.csv", stringsAsFactors = FALSE) %>%
mutate(Fluctuation = data$High - data$Low) %>%
select(Date, Fluctuation)
colnames(ConsumerGoods) <- c("Date", paste("ConsumerGoods Fluctuation"))
Healthcare <- read.csv("data/VHT.csv", stringsAsFactors = FALSE) %>%
mutate(Fluctuation = data$High - data$Low) %>%
select(Date, Fluctuation)
colnames(Healthcare) <- c("Date", paste("Healthcare Fluctuation"))
RealEstate <- read.csv("data/ICF.csv", stringsAsFactors = FALSE) %>%
mutate(Fluctuation = data$High - data$Low) %>%
select(Date, Fluctuation)
colnames(RealEstate) <- c("Date", paste("RealEstate Fluctuation"))
DataFrame <- ConsumerGoods %>%
inner_join(FederalFund) %>%
inner_join(Technology) %>%
inner_join(Healthcare) %>%
inner_join(RealEstate)
}
mutateFluctuation <- function(data) {
newDataFrame <-data %>%
mutate(Fluctuation = data$High - data$Low) %>%
select(Date, Fluctuation)
}
Test <- createDataFrame()
createDataFrame <- function() {
FederalFund <- read.csv("data/Effective_Feceral_Funds_Rate_07011954_10012019.csv", stringsAsFactors = FALSE)
colnames(FederalFund) <- c("Date", "FedFunds")
Technology1 <- read.csv("data/First_Trust_NASDAQ_100_Technology_Sector_Index_Fund_05022006_11072019.csv", stringsAsFactors = FALSE)
Technology <- Technology1 %>%
mutate(Fluctuation = data$High - data$Low) %>%
select(Date, Fluctuation)
colnames(Technology) <- c("Date", paste("Technology Fluctuation"))
ConsumerGoods1 <- read.csv("data/ProShares_Ultra_Consumer_Goods_02012007_11072019.csv", stringsAsFactors = FALSE)
ConsumerGoods <-ConsumerGoods1 %>%
mutate(Fluctuation = data$High - data$Low) %>%
select(Date, Fluctuation)
colnames(ConsumerGoods) <- c("Date", paste("ConsumerGoods Fluctuation"))
Healthcare1 <- read.csv("data/VHT.csv", stringsAsFactors = FALSE)
Healthcare <- Healthcare1 %>%
mutate(Fluctuation = data$High - data$Low) %>%
select(Date, Fluctuation)
colnames(Healthcare) <- c("Date", paste("Healthcare Fluctuation"))
RealEstate1 <- read.csv("data/ICF.csv", stringsAsFactors = FALSE)
RealEstate <- RealEstate1 %>%
mutate(Fluctuation = data$High - data$Low) %>%
select(Date, Fluctuation)
colnames(RealEstate) <- c("Date", paste("RealEstate Fluctuation"))
DataFrame <- ConsumerGoods %>%
inner_join(FederalFund) %>%
inner_join(Technology) %>%
inner_join(Healthcare) %>%
inner_join(RealEstate)
}
Test <- createDataFrame()
library("dplyr")
library("ggplot2")
library("plotly")
library("dplyr")
createDataFrame <- function() {
FederalFund <- read.csv("data/Effective_Feceral_Funds_Rate_07011954_10012019.csv", stringsAsFactors = FALSE)
colnames(FederalFund) <- c("Date", "FedFunds")
Technology1 <- read.csv("data/First_Trust_NASDAQ_100_Technology_Sector_Index_Fund_05022006_11072019.csv", stringsAsFactors = FALSE)
Technology <- Technology1 %>%
mutate(Fluctuation = data$High - data$Low) %>%
select(Date, Fluctuation)
colnames(Technology) <- c("Date", paste("Technology Fluctuation"))
ConsumerGoods1 <- read.csv("data/ProShares_Ultra_Consumer_Goods_02012007_11072019.csv", stringsAsFactors = FALSE)
ConsumerGoods <-ConsumerGoods1 %>%
mutate(Fluctuation = data$High - data$Low) %>%
select(Date, Fluctuation)
colnames(ConsumerGoods) <- c("Date", paste("ConsumerGoods Fluctuation"))
Healthcare1 <- read.csv("data/VHT.csv", stringsAsFactors = FALSE)
Healthcare <- Healthcare1 %>%
mutate(Fluctuation = data$High - data$Low) %>%
select(Date, Fluctuation)
colnames(Healthcare) <- c("Date", paste("Healthcare Fluctuation"))
RealEstate1 <- read.csv("data/ICF.csv", stringsAsFactors = FALSE)
RealEstate <- RealEstate1 %>%
mutate(Fluctuation = data$High - data$Low) %>%
select(Date, Fluctuation)
colnames(RealEstate) <- c("Date", paste("RealEstate Fluctuation"))
DataFrame <- ConsumerGoods %>%
inner_join(FederalFund) %>%
inner_join(Technology) %>%
inner_join(Healthcare) %>%
inner_join(RealEstate)
}
Test <- createDataFrame()
Test <- createDataFrame()
createDataFrame <- function() {
FederalFund <- read.csv("data/Effective_Feceral_Funds_Rate_07011954_10012019.csv", stringsAsFactors = FALSE)
colnames(FederalFund) <- c("Date", "FedFunds")
Technology1 <- read.csv("data/First_Trust_NASDAQ_100_Technology_Sector_Index_Fund_05022006_11072019.csv", stringsAsFactors = FALSE)
Technology <- Technology1 %>%
mutate(Fluctuation = Technology1$High - Technology1$Low) %>%
select(Date, Fluctuation)
colnames(Technology) <- c("Date", paste("Technology Fluctuation"))
ConsumerGoods1 <- read.csv("data/ProShares_Ultra_Consumer_Goods_02012007_11072019.csv", stringsAsFactors = FALSE)
ConsumerGoods <-ConsumerGoods1 %>%
mutate(Fluctuation = ConsumerGoods1$High - ConsumerGoods1$Low) %>%
select(Date, Fluctuation)
colnames(ConsumerGoods) <- c("Date", paste("ConsumerGoods Fluctuation"))
Healthcare1 <- read.csv("data/VHT.csv", stringsAsFactors = FALSE)
Healthcare <- Healthcare1 %>%
mutate(Fluctuation = Healthcare1$High - Healthcare1$Low) %>%
select(Date, Fluctuation)
colnames(Healthcare) <- c("Date", paste("Healthcare Fluctuation"))
RealEstate1 <- read.csv("data/ICF.csv", stringsAsFactors = FALSE)
RealEstate <- RealEstate1 %>%
mutate(Fluctuation = RealEstate1$High - RealEstate1$Low) %>%
select(Date, Fluctuation)
colnames(RealEstate) <- c("Date", paste("RealEstate Fluctuation"))
DataFrame <- ConsumerGoods %>%
inner_join(FederalFund) %>%
inner_join(Technology) %>%
inner_join(Healthcare) %>%
inner_join(RealEstate)
}
Test <- createDataFrame()
Fluctuation <- createDataFrame()
Test <- fluctuationCompareGraph("2007-01-01", "2015-01-01", "Technology Fluctuation", Fluctuation)
fluctuationCompareGraph <- function(date1, date2, col, ourData) {
range <- filter(ourData, Date >= date1 & Date <= date2)
FluctuationInDifferentIndustry <- plot_ly(
data = range,
x = ~Date,
y = range[[col]],
type = "scatter",
mode = "lines",
fill = "tozeroy",
alpha = .7,
hovertext = "Fluctuation Rate"
)
layout(
title = "Industry Index Fluctuation",
xaxis = list(title = "Date"),
yaxis = list(title = "Index Rate of Change ")
)
}
Fluctuation <- createDataFrame()
Test <- fluctuationCompareGraph("2007-01-01", "2015-01-01", "Technology Fluctuation", Fluctuation)
fluctuationCompareGraph <- function(date1, date2, col, ourData) {
range <- filter(ourData, Date >= date1 & Date <= date2)
FluctuationInDifferentIndustry <- plot_ly(
data = range,
x = ~Date,
y = range[[col]],
type = "scatter",
mode = "lines",
alpha = .7,
hovertext = "Fluctuation Rate"
)
layout(
title = "Industry Index Fluctuation",
xaxis = list(title = "Date"),
yaxis = list(title = "Index Rate of Change ")
)
}
Fluctuation <- createDataFrame()
Test <- fluctuationCompareGraph("2007-01-01", "2015-01-01", "Technology Fluctuation", Fluctuation)
fluctuationCompareGraph <- function(date1, date2, col, ourData) {
range <- filter(ourData, Date >= date1 & Date <= date2)
FluctuationInDifferentIndustry <- plot_ly(
data = range,
x = ~Date,
y = range[[col]],
type = "scatter",
mode = "lines",
alpha = .7,
hovertext = "Fluctuation Rate"
)
layout(
title = "Industry Index Fluctuation",
xaxis = list(title = "Date"),
yaxis = list(title = "Index Rate of Change")
)
}
Fluctuation <- createDataFrame()
Test <- fluctuationCompareGraph("2007-01-01", "2015-01-01", "Technology Fluctuation", Fluctuation)
fluctuationCompareGraph <- function(date1, date2, col, ourData) {
range <- filter(ourData, Date >= date1 & Date <= date2)
FluctuationInDifferentIndustry <- plot_ly(
data = range,
x = ~Date,
y = range[[col]],
type = "scatter",
mode = "lines",
alpha = .7,
hovertext = "Fluctuation Rate"
)
layout(
title = "Industry Index Fluctuation"
)
}
Fluctuation <- createDataFrame()
Test <- fluctuationCompareGraph("2007-01-01", "2015-01-01", "Technology Fluctuation", Fluctuation)
fluctuationCompareGraph <- function(date1, date2, col, ourData) {
range <- filter(ourData, Date >= date1 & Date <= date2)
FluctuationInDifferentIndustry <- plot_ly(
data = range,
x = ~Date,
y = range[[col]],
type = "scatter",
mode = "lines",
alpha = .7,
hovertext = "Fluctuation Rate"
)
layout(
title = "Industry Index Fluctuation",
xaxis = list(title = "Date"),
yaxis = list(title = "Index Rate of Change")
)
}
fluctuationCompareGraph <- function(date1, date2, col, ourData) {
range <- filter(ourData, Date >= date1 & Date <= date2)
FluctuationInDifferentIndustry <- plot_ly(
data = range,
x = ~Date,
y = range[[col]],
type = "scatter",
mode = "lines",
alpha = .7,
hovertext = "Fluctuation Rate"
) %>%
layout(
title = "Industry Index Fluctuation",
xaxis = list(title = "Date"),
yaxis = list(title = "Index Rate of Change")
)
}
Test <- fluctuationCompareGraph("2007-01-01", "2015-01-01", "Technology Fluctuation", Fluctuation)
print(test)
print(Test)
fluctuationCompareGraph <- function(date1, date2, col, ourData) {
range <- filter(ourData, Date >= date1 & Date <= date2)
FluctuationInDifferentIndustry <- plot_ly(
data = range,
x = ~Date,
y = range[[col]],
type = "scatter",
mode = "lines",
alpha = .7,
hovertext = "Fluctuation Rate",
fill = "tozeroy"
) %>%
layout(
title = "Industry Index Fluctuation",
xaxis = list(title = "Date"),
yaxis = list(title = "Index Rate of Change")
)
}
Test <- fluctuationCompareGraph("2007-01-01", "2015-01-01", "Technology Fluctuation", Fluctuation)
print(Test)
shiny::runApp()
source("scripts/Metric3Analysis(Kunpei).R")
setwd("C:/Users/kunpei.peng/finalproject_info201")
source("scripts/Metric3Analysis(Kunpei).R")
source("scripts/Metric3Analysis(Kunpei).R")
server <- function(input, output) {
output$Metric1Graph <- renderPlotly(
FedCompareGraph(input$Metric1Date[1], input$Metric1Date[2], paste(input$Metric1Stock,"Adj.Close"), AdjData)
)
output$Metric3Graph <- renderPlotly(
fluctuationCompareGraph(input$Metric3Date[1], input$Metric3Date[2], paste(input$Metric3Stock,"Fluctuation"), Fluctuation)
)
}
runApp()
runApp()
runApp()
runApp()
