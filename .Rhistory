addCircles(
lat = shootings_df$lat,
lng = shootings_df$long,
popup = paste("City: ", shootings_df$city, "<br>",
"Killed: ", shootings_df$num_killed, "<br>",
"Injured: ", shootings_df$num_injured),
radius = 50000,
stroke = TRUE)
leaflet(data = shootings_df) %>%
addProviderTiles("CartoDB.DarkMatter") %>%
addCircles(
lat = shootings_df$lat,
lng = shootings_df$long,
popup = paste("City: ", shootings_df$city, "<br>",
"Killed: ", shootings_df$num_killed, "<br>",
"Injured: ", shootings_df$num_injured),
radius = 30000,
stroke = TRUE)
shootings_map <- leaflet(data = shootings_df) %>%
addProviderTiles("CartoDB.DarkMatter") %>%
addCircles(
lat = shootings_df$lat,
lng = shootings_df$long,
popup = paste("City: ", shootings_df$city, "<br>",
"Killed: ", shootings_df$num_killed, "<br>",
"Injured: ", shootings_df$num_injured),
radius = 30000,
stroke = TRUE)
shootings_map
ggplot(data = shootings_df,aes(shootings_df$num_killed, y = shootings_df$num_killed)) +
geom_histogram(
stat = "identity",
show.legend = TRUE
)
ggplot(data = shootings_df,aes(shootings_df$num_killed, y = shootings_df$num_killed, fill = shootings_df$month)) +
geom_histogram(
stat = "identity",
show.legend = TRUE
)
ggplot(data = shootings_df,aes(shootings_df$num_killed, y = shootings_df$num_killed, fill = shootings_df$month)) +
geom_histogram(
stat = "identity",
show.legend = TRUE
) +
labs(title = "Number of Shootings", x = "Number of Deaths", y = "Count")
ggplot(data = shootings_df,aes(shootings_df$num_killed, y = shootings_df$num_killed, fill = shootings_df$month)) +
geom_histogram(
stat = "identity",
show.legend = TRUE
) +
labs(x = "Number of Deaths", y = "Count")
shootings_map <- ggplot(data = shootings_df,aes(shootings_df$num_killed, y = shootings_df$num_killed, fill = shootings_df$month)) +
geom_histogram(
stat = "identity",
show.legend = TRUE
) +
labs(x = "Number of Deaths", y = "Count")
shootings_map
shootings_map <- ggplot(data = shootings_df,aes(shootings_df$num_killed, y = shootings_df$num_killed, fill = shootings_df$month)) +
geom_histogram(
stat = "identity",
show.legend = TRUE
) +
labs(title = "Shootings Histogram", x = "Number of Deaths", y = "Count")
shootings_map
shootings_map <- leaflet(data = shootings_df) %>%
addProviderTiles("CartoDB.DarkMatter") %>%
addCircles(
lat = shootings_df$lat,
lng = shootings_df$long,
popup = paste("City: ", shootings_df$city, "<br>",
"Killed: ", shootings_df$num_killed, "<br>",
"Injured: ", shootings_df$num_injured),
radius = 30000,
stroke = TRUE)
histogram <- ggplot(data = shootings_df,aes(shootings_df$num_killed, y = shootings_df$num_killed, fill = shootings_df$month)) +
geom_histogram(
stat = "identity",
show.legend = TRUE
) +
labs(title = "Shootings Histogram", x = "Number of Deaths", y = "Count")
histogram <- ggplot(data = shootings_df,aes(shootings_df$num_killed, y = shootings_df$num_killed, fill = shootings_df$month)) +
geom_histogram(
stat = "identity",
show.legend = TRUE
) +
labs(title = "Shootings Histogram", x = "Number of Deaths", y = "Count")
histogram <- ggplot(data = shootings_df,aes(shootings_df$num_killed, y = shootings_df$num_killed, fill = shootings_df$month)) +
geom_histogram(
stat = "identity",
show.legend = TRUE
) +
labs(title = "Shootings Histogram", x = "Number of Deaths", y = "Count")
histogram
histogram_visual <- ggplot(data = shootings_df,aes(shootings_df$num_killed, y = shootings_df$num_killed, fill = shootings_df$month)) +
geom_histogram(
stat = "identity",
show.legend = TRUE
) +
labs(title = "Shootings Histogram", x = "Number of Deaths", y = "Count")
histogram_visual
leaflet(data = shootings_df) %>%
addProviderTiles("CartoDB.DarkMatter") %>%
addCircles(
lat = shootings_df$lat,
lng = shootings_df$long,
popup = paste("City: ", shootings_df$city, "<br>",
"Killed: ", shootings_df$num_killed, "<br>",
"Injured: ", shootings_df$num_injured),
radius = 3000,
stroke = TRUE)
library(ggplot2)
library(dplyr)
library(leaflet)
library(stringr)
library(plotly)
leaflet(data = shootings_df) %>%
addProviderTiles("CartoDB.DarkMatter") %>%
addCircles(
lat = shootings_df$lat,
lng = shootings_df$long,
popup = paste("City: ", shootings_df$city, "<br>",
"Killed: ", shootings_df$num_killed, "<br>",
"Injured: ", shootings_df$num_injured),
radius = 3000,
stroke = TRUE)
leaflet(data = shootings_df) %>%
addProviderTiles("CartoDB.DarkMatter") %>%
addCircles(
lat = shootings_df$lat,
lng = shootings_df$long,
popup = paste("City: ", shootings_df$city, "<br>",
"Killed: ", shootings_df$num_killed, "<br>",
"Injured: ", shootings_df$num_injured),
radius = 3000,
stroke = FALSE
leaflet(data = shootings_df) %>%
addProviderTiles("CartoDB.DarkMatter") %>%
addCircles(
lat = shootings_df$lat,
lng = shootings_df$long,
popup = paste("City: ", shootings_df$city, "<br>",
"Killed: ", shootings_df$num_killed, "<br>",
"Injured: ", shootings_df$num_injured),
radius = 3000,
stroke = FALSE)
leaflet(data = shootings_df) %>%
addProviderTiles("CartoDB.DarkMatter") %>%
addCircles(
lat = shootings_df$lat,
lng = shootings_df$long,
popup = paste("City: ", shootings_df$city, "<br>",
"Killed: ", shootings_df$num_killed, "<br>",
"Injured: ", shootings_df$num_injured),
radius = 30000,
stroke = FALSE)
shootings_map <- leaflet(data = shootings_df) %>%
addProviderTiles("CartoDB.DarkMatter") %>%
addCircles(
lat = shootings_df$lat,
lng = shootings_df$long,
popup = paste("City: ", shootings_df$city, "<br>",
"Killed: ", shootings_df$num_killed, "<br>",
"Injured: ", shootings_df$num_injured),
radius = 30000,
stroke = FALSE)
Reduce(merge, list(summary_interest_rate, summary_qtec,  summary_usd))
# Install Packages
library(dplyr)
# Load data sources
qtec_df <- data.frame(read.csv("data/First_Trust_NASDAQ_100_Technology_Sector_Index_Fund_05022006_11072019.csv", stringsAsFactors = FALSE))
usd_df <- data.frame(read.csv("data/ProShares_Ultra_Consumer_Goods_02012007_11072019.csv", stringsAsFactors = FALSE))
unfiltered_ffr_df <- data.frame(read.csv("data/Effective_Feceral_Funds_Rate_07011954_10012019.csv", stringsAsFactors = FALSE))
#Create New Column for Federal Rate
unfiltered_ffr_df$Year <- substr(unfiltered_ffr_df$DATE, 1, 4)
ffr_df <- filter(unfiltered_ffr_df, Year > 2006)
qtec_df$Year <- substr(qtec_df$Date, 1, 4)
fqtec_df <- filter(qtec_df, Year > 2006)
usd_df$Year <- substr(usd_df$Date, 1, 4)
summary_interest_rate <- ffr_df %>%
group_by(Year) %>%
summarize(
Ave_FFR = round(mean(FEDFUNDS), digits = 2)
)
summary_qtec <- fqtec_df %>%
group_by(Year) %>%
summarize(
QTEC_max_vol = max(Volume),
QTEC_FFR_of_max_vol = High[which(Volume == max(Volume))],
QTEC_min_vol = min(Volume),
QTEC_FFR_of_min_vol = High[which(Volume == min(Volume))]
)
summary_usd <- usd_df %>%
group_by(Year) %>%
summarize(
UGE_max_vol = max(Volume),
UGE_FFR_of_max_vol = round(High[which(Volume == max(Volume))], digits = 2),
UGE_min_vol = min(Volume),
UGE_FFR_of_min_vol = round(High[which(Volume == min(Volume))], digits = 2)
)
merged_summary_table <- Reduce(merge, list(summary_interest_rate, summary_qtec,  summary_usd))
merged_summary_table <- Reduce(merge, list(summary_interest_rate, summary_qtec,  summary_usd))
summary_interest_rate <- ffr_df %>%
group_by(Year) %>%
summarize(
Ave_FFR = round(mean(FEDFUNDS), digits = 2)
)
unfiltered_ffr_df$Year <- substr(unfiltered_ffr_df$DATE, 1, 4)
ffr_df <- filter(unfiltered_ffr_df, Year > 2006)
qtec_df$Year <- substr(qtec_df$Date, 1, 4)
fqtec_df <- filter(qtec_df, Year > 2006)
usd_df$Year <- substr(usd_df$Date, 1, 4)
qtec_df <- data.frame(read.csv("data/First_Trust_NASDAQ_100_Technology_Sector_Index_Fund_05022006_11072019.csv", stringsAsFactors = FALSE))
usd_df <- data.frame(read.csv("data/ProShares_Ultra_Consumer_Goods_02012007_11072019.csv", stringsAsFactors = FALSE))
unfiltered_ffr_df <- data.frame(read.csv("data/Effective_Feceral_Funds_Rate_07011954_10012019.csv", stringsAsFactors = FALSE))
getwd()
setwd("/Users/Benmetsker22/Desktop/Git/finalproject_info201/")
qtec_df <- data.frame(read.csv("data/First_Trust_NASDAQ_100_Technology_Sector_Index_Fund_05022006_11072019.csv", stringsAsFactors = FALSE))
usd_df <- data.frame(read.csv("data/ProShares_Ultra_Consumer_Goods_02012007_11072019.csv", stringsAsFactors = FALSE))
unfiltered_ffr_df <- data.frame(read.csv("data/Effective_Feceral_Funds_Rate_07011954_10012019.csv", stringsAsFactors = FALSE))
# Create New Columns
qtec_df$Fluctuation <- qtec_df$High - qtec_df$Low
qtec_df$Day_Range <- qtec_df$Close - qtec_df$Open
usd_df$Fluctuation <- usd_df$High - usd_df$Low
usd_df$Day_Range <- usd_df$Close - usd_df$Open
unfiltered_ffr_df$Year <- substr(unfiltered_ffr_df$DATE, 1, 4)
ffr_df <- filter(unfiltered_ffr_df, Year >= 2006)
# Install Packages
library(dplyr)
# Calculations
qtec_avg_fluctuation <- mean(qtec_df$Fluctuation)
usd_avg_fluctuation <- mean(usd_df$Fluctuation)
qtec_avg_day_range <- mean(qtec_df$Day_Range)
usd__avg_day_range <- mean(usd_df$Day_Range)
usd_ltd_volume <- sum(usd_df$Volume)
qtec_ltd_volume <- sum(qtec_df$Volume)
ffr_avg_rate <- mean(ffr_df$FEDFUNDS)
ffr_min_rate <- min(ffr_df$FEDFUNDS)
getwd()
setwd("/Users/Benmetsker22/Desktop/Git/finalproject_info201")
qtec_df <- data.frame(read.csv("data/First_Trust_NASDAQ_100_Technology_Sector_Index_Fund_05022006_11072019.csv", stringsAsFactors = FALSE))
usd_df <- data.frame(read.csv("data/ProShares_Ultra_Consumer_Goods_02012007_11072019.csv", stringsAsFactors = FALSE))
unfiltered_ffr_df <- data.frame(read.csv("data/Effective_Feceral_Funds_Rate_07011954_10012019.csv", stringsAsFactors = FALSE))
qtec_df$Fluctuation <- qtec_df$High - qtec_df$Low
qtec_df$Day_Range <- qtec_df$Close - qtec_df$Open
usd_df$Fluctuation <- usd_df$High - usd_df$Low
usd_df$Day_Range <- usd_df$Close - usd_df$Open
unfiltered_ffr_df$Year <- substr(unfiltered_ffr_df$DATE, 1, 4)
ffr_df <- filter(unfiltered_ffr_df, Year >= 2006)
View(qtec_df)
summary_data <- function(dataset) {
ret <- list()
dataset$Volume
}
summary_data(qtec_df)
summary_data <- function(dataset) {
ret <- list()
mean(dataset$Volume)
mean(qtec_df$Fluctuation)
}
summary_data(qtec_df)
summary_data <- function(dataset) {
ret <- list(
mean(dataset$Volume),
mean(qtec_df$Fluctuation))
}
summary_data(qtec_df)
summary_data <- function(dataset) {
ret <- list(
mean(dataset$Volume),
mean(dataset$Fluctuation))
}
summary_data(qtec_df)
summary_data <- function(dataset) {
ret <- c(
mean(dataset$Volume),
mean(dataset$Fluctuation))
}
summary_data(qtec_df)
summary_data <- function(dataset) {
ret <- list()
mean(dataset$Volume) &&
mean(dataset$Fluctuation)
}
summary_data(qtec_df)
library(dplyr)
<<<<<<< HEAD
library(dplyr)
library(ggplot2)
library(plotly)
library(knitr)
source('analysis(Team).R')
library(shiny); runApp('practice_app.R')
runApp('practice_app.R')
runApp('practice_app.R')
runApp('practice_app.R')
runApp('practice_app.R')
runApp('practice_app.R')
runApp('practice_app.R')
?selectInput
runApp('practice_app.R')
runApp('practice_app.R')
runApp('practice_app.R')
runApp('practice_app.R')
runApp('practice_app.R')
runApp('practice_app.R')
runApp('~/Desktop/Git/a7-bmetsker')
runApp('~/Desktop/Git/a7-bmetsker')
runApp('~/Desktop/Git/a7-bmetsker')
outputs$popchart <- renderPlot({
state_race_long <- midwest %>%
select(state, popwhite, popblack, popamerindian, popasian, popother) %>%
gather(key = race, value = population, -state)
ggplot(state_race_long) +
geom_col(mapping = aes(x = race, y = population, fill = state))
})
runApp('practice_app.R')
runApp('practice_app.R')
runApp('practice_app.R')
runApp('practice_app.R')
runApp('practice_app.R')
runApp('practice_app.R')
runApp('practice_app.R')
runApp('practice_app.R')
runApp('practice_app.R')
runApp('practice_app.R')
runApp('practice_app.R')
runApp('~/Desktop/Git/a7-bmetsker')
runApp('~/Desktop/Git/a7-bmetsker')
runApp('practice_app.R')
View(WorldPhones)
runApp('practice_app.R')
runApp('~/Desktop/Git/a7-bmetsker')
barplot(WorldPhones[,input$region]*1000,
main=input$region,
ylab="Number of Telephones",
xlab="Year")
barplot(WorldPhones,
main=input$region,
ylab="Number of Telephones",
xlab="Year")
library(shiny)
library(dplyr)
library(tidyr)
library(ggplot2)
library(shinythemes)
barplot(midwest,
main = input$state,
ylab = "Number of Telephones",
xlab = "Year")
barplot(WorldPhones,
main=input$region,
ylab="Number of Telephones",
xlab="Year")
barplot(midwest,
main = state,
ylab = "Number of Telephones",
xlab = "Year")
barplot(midwest,
main = state,
ylab = "Number of Telephones",
xlab = "Year")
runApp('~/Desktop/Git/a7-bmetsker')
runApp('~/Desktop/Git/a7-bmetsker')
c
runApp('~/Desktop/Git/a7-bmetsker')
runApp('~/Desktop/Git/a7-bmetsker')
runApp('~/Desktop/Git/a7-bmetsker')
runApp('~/Desktop/Git/a7-bmetsker')
runApp('~/Desktop/Git/a7-bmetsker')
ggplot(data = midwest,
mapping = aes(x = percollege)) +
geom_histogram(color = "darkblue", fill = "lightblue")
runApp('practice_app.R')
runApp('practice_app.R')
runApp('practice_app.R')
runApp('~/Desktop/Git/a7-bmetsker')
runApp('practice_app.R')
View(midwest)
runApp('practice_app.R')
runApp('practice_app.R')
runApp('practice_app.R')
runApp('practice_app.R')
runApp('practice_app.R')
runApp('practice_app.R')
runApp('practice_app.R')
runApp('practice_app.R')
runApp('practice_app.R')
runApp('practice_app.R')
runApp('practice_app.R')
runApp('practice_app.R')
runApp('practice_app.R')
runApp('practice_app.R')
runApp('practice_app.R')
runApp('practice_app.R')
runApp('practice_app.R')
runApp('practice_app.R')
runApp('practice_app.R')
runApp('practice_app.R')
runApp('practice_app.R')
runApp('practice_app.R')
runApp('practice_app.R')
runApp('practice_app.R')
runApp('practice_app.R')
runApp('practice_app.R')
runApp('practice_app.R')
runApp('practice_app.R')
runApp('practice_app.R')
runApp('practice_app.R')
runApp('practice_app.R')
runApp('practice_app.R')
runApp('practice_app.R')
runApp('~/Desktop/Git/a7-bmetsker')
runApp('~/Desktop/Git/a7-bmetsker')
runApp()
runApp('~/Desktop/Git/a7-bmetsker')
runApp('~/Desktop/Git/a7-bmetsker')
runApp('~/Desktop/Git/a7-bmetsker')
runApp('~/Desktop/Git/a7-bmetsker')
runApp('~/Desktop/Git/a7-bmetsker')
runApp('~/Desktop/Git/a7-bmetsker')
runApp('~/Desktop/Git/a7-bmetsker')
runApp('~/Desktop/Git/a7-bmetsker')
runApp('~/Desktop/Git/a7-bmetsker')
runApp('~/Desktop/Git/a7-bmetsker')
runApp('~/Desktop/Git/a7-bmetsker')
runApp('~/Desktop/Git/a7-bmetsker')
runApp('~/Desktop/Git/a7-bmetsker')
runApp('~/Desktop/Git/a7-bmetsker')
runApp('~/Desktop/Git/a7-bmetsker')
runApp('~/Desktop/Git/a7-bmetsker')
runApp('~/Desktop/Git/a7-bmetsker')
runApp('~/Desktop/Git/a7-bmetsker')
runApp('~/Desktop/Git/a7-bmetsker')
runApp('~/Desktop/Git/a7-bmetsker')
runApp('~/Desktop/Git/a7-bmetsker')
runApp('~/Desktop/Git/a7-bmetsker')
runApp('~/Desktop/Git/a7-bmetsker')
?aes_string
runApp('~/Desktop/Git/a7-bmetsker')
runApp('~/Desktop/Git/a7-bmetsker')
?geom_histogram
runApp('~/Desktop/Git/a7-bmetsker')
?hist
hist(midwest$input$x2)
runApp('~/Desktop/Git/a7-bmetsker')
runApp('~/Desktop/Git/a7-bmetsker')
runApp('~/Desktop/Git/a7-bmetsker')
runApp('~/Desktop/Git/a7-bmetsker')
runApp('~/Desktop/Git/a7-bmetsker')
runApp('~/Desktop/Git/a7-bmetsker')
?aes_string
?geom_point
runApp('~/Desktop/Git/a7-bmetsker')
runApp('~/Desktop/Git/a7-bmetsker')
runApp('~/Desktop/Git/a7-bmetsker')
runApp('~/Desktop/Git/a7-bmetsker')
runApp('~/Desktop/Git/a7-bmetsker')
shiny::runApp()
library("ggplot2")
library("plotly")
library("dplyr")
setwd("~/Desktop/INFO201/finalproject_info201")
library("ggplot2")
library("plotly")
library("dplyr")
runApp()
runApp()
setwd("~/Desktop/INFO201/finalproject_info201")
library("ggplot2")
library("plotly")
library("dplyr")
createDataFrame <- function(col) {
Technology <- read.csv("data/First_Trust_NASDAQ_100_Technology_Sector_Index_Fund_05022006_11072019.csv", stringsAsFactors = FALSE) %>%
select(Date, col)
colnames(Technology) <- c("Date", paste("Technology", col))
ConsumerGoods <- read.csv("data/ProShares_Ultra_Consumer_Goods_02012007_11072019.csv", stringsAsFactors = FALSE) %>%
select(Date, col)
colnames(ConsumerGoods) <- c("Date", paste("ConsumerGoods", col))
Healthcare <- read.csv("data/VHT.csv", stringsAsFactors = FALSE) %>%
select(Date, col)
colnames(Healthcare) <- c("Date", paste("Healthcare", col))
RealEstate <- read.csv("data/ICF.csv", stringsAsFactors = FALSE) %>%
select(Date, col)
colnames(RealEstate) <- c("Date", paste("RealEstate", col))
DataFrame <- ConsumerGoods %>%
inner_join(Technology) %>%
inner_join(Healthcare) %>%
inner_join(RealEstate)
}
VolumeGraph <- function(date1, date2, col, df) {
range <- filter(df, Date >= date1 & Date <= date2)
Volume_Change_Graph <- plot_ly(
data = range,
x = ~Date,
y = range[[col]],
type = "bar",
alpha = .7,
hovertext = "y"
) %>%
layout(
title = "Volume Rate of the Stocks",
xaxis = list(title = "Date"),
yaxis = list(title = paste(col, "Volume"))
)
}
runApp()
output$Metric2Graph <- renderPlotly(
VolumeGraph(input$Metric2Date[1], input$Metric2Date[2], paste(input$Metric2Stock,"Volume"), VolumeData)
)
runApp()
runApp()
